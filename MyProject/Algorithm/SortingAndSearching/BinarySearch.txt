https://www.geeksforgeeks.org/binary-search/

https://www.youtube.com/watch?v=j7NodO9HIbk&list=PL_z_8CaSLPWeYfhtuKHj-9MpYb6XQJ_f2&index=1


1) Binary Search  ==> BinarySearch.cs ==> BinarySearchAsc
https://www.geeksforgeeks.org/binary-search/

Problem: Given a sorted array arr[] of n elements, write a function to search a given element x in arr[] and return the index of x in the array.

     Consider array is 0 base index.

	 Examples: 

	Input: arr[] = {10, 20, 30, 50, 60, 80, 110, 130, 140, 170}, x = 110
	Output: 6
	Explanation: Element x is present at index 6. 

	Input: arr[] = {10, 20, 30, 40, 60, 110, 120, 130, 170}, x = 175
	Output: -1
	Explanation: Element x is not present in arr[].

2) Binary Search on Reverse Sorted Array ==> BinarySearch.cs ==> BinarySearchDecending
https://www.geeksforgeeks.org/search-an-element-in-a-reverse-sorted-array/

Given an array arr[] sorted in decreasing order, and an integer X, the task is to check if X is present in the given array or not. 
If X is present in the array, print its index ( 0-based indexing). Otherwise, print -1.

Examples: 

Input: arr[] = {5, 4, 3, 2, 1}, X = 4
Output: 1
Explanation: Element X (= 4) is present at index 1.
Therefore, the required output is 1.

Input: arr[] = {10, 8, 2, -9}, X = 5
Output: -1
Explanation: Element X (= 5) is not present in the array.
Therefore, the required output is -1.

3) Order Not Know search ==> BinarySearch.cs ==> BinarySearchNotKnow
https://www.geeksforgeeks.org/order-agnostic-binary-search/

Order-Agnostic Binary Search is a modified version of Binary Search algorithm. Here in this modified binary search comes with one more condition checking. 
The intuition behind this algorithm is what if the order of the sorted array is not given. So here check that the value of the first element is greater or smaller than the last element.

If the first element is smaller than the last element-then if the search key value X is less than the middle of the interval then the end pointer will be changed to middle -1 otherwise start will be changed to middle + 1.
If the first element is greater than the last element-then if the search key value X is less than the middle of the interval 
then the start pointer will move to the next element of the middle element otherwise the end pointer will move previous to the middle element.

Examples:

Input: arr[] = {40, 10, 5, 2, 1}, N=5, X=10
Output: 1

4) First and Last occurrence of an Element ==> BinarySearchExt.cs ==> BinarySearchFirstElement
https://www.geeksforgeeks.org/find-first-and-last-positions-of-an-element-in-a-sorted-array/
https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/

Given a sorted array with possibly duplicate elements, the task is to find indexes of first and last occurrences of an element x in the given array. 

Examples: 

Input : arr[] = {1, 3, 5, 5, 5, 5, 67, 123, 125}    
        x = 5
Output : First Occurrence = 2
         Last Occurrence = 5

Input : arr[] = {1, 3, 5, 5, 5, 5, 7, 123, 125 }    
        x = 7
Output : First Occurrence = 6
         Last Occurrence = 6
		 
5) Count number of occurrences (or frequency) in a sorted array ==> BinarySearchExt.cs ==> BinarySearchLastElement
https://www.geeksforgeeks.org/count-number-of-occurrences-or-frequency-in-a-sorted-array/

Same example that above, see last Occurrence

6) Find the Rotation Count in Rotated Sorted array ==> SortedArrayRotatedBS.cs ==> NumberOfTimesArrayRoated
https://www.geeksforgeeks.org/find-rotation-count-rotated-sorted-array/

Consider an array arr of distinct numbers sorted in increasing order. Given that this array has been rotated (clockwise) k number of times. Given such an array, find the value of k.

Examples:  

Input: arr[] = {15, 18, 2, 3, 6, 12}
Output: 2
Explanation: Initial array must be {2, 3, 6, 12, 15, 18}. We get the given array after rotating the initial array twice.

Input: arr[] = {7, 9, 11, 12, 5}
Output: 4

Input: arr[] = {7, 9, 11, 12, 15};
Output: 0


7) Find an Element in a Rotated Sorted Array ==> SortedArrayRotatedBS.cs ==> FindElement
https://www.geeksforgeeks.org/search-an-element-in-a-sorted-and-pivoted-array/
An element in a sorted array can be found in O(log n) time via binary search. 
But suppose we rotate an ascending order sorted array at some pivot unknown to you beforehand. So for instance, 1 2 3 4 5 might become 3 4 5 1 2. 
Devise a way to find an element in the rotated array in O(log n) time.

Example:  

Input  : arr[] = {5, 6, 7, 8, 9, 10, 1, 2, 3}, key = 3
Output : Found at index 8

Input  : arr[] = {5, 6, 7, 8, 9, 10, 1, 2, 3}, key = 30
Output : Not found

Input : arr[] = {30, 40, 50, 10, 20}, key = 10   
Output : Found at index 3


8) Find Element in nearly sorted array ==> NearlySortedArray.cs ==> FindElement
https://www.geeksforgeeks.org/search-almost-sorted-array/

Given an array which is sorted, but after sorting some elements are moved to either of the adjacent positions,
i.e., arr[i] may be present at arr[i+1] or arr[i-1]. Write an efficient function to search an element in this array. 
Basically the element arr[i] can only be swapped with either arr[i+1] or arr[i-1].
For example consider the array {2, 3, 10, 4, 40}, 4 is moved to next position and 10 is moved to previous position.
Example : 
 

Input: arr[] =  {10, 3, 40, 20, 50, 80, 70}, key = 40
Output: 2 
Output is index of 40 in given array

Input: arr[] =  {10, 3, 40, 20, 50, 80, 70}, key = 90
Output: -1
-1 is returned to indicate element is not present


9) Find Floor of an element in a Sorted Array ==> SortedArrayBS.cs ==> FindFloor
https://www.geeksforgeeks.org/floor-in-a-sorted-array/

Given a sorted array and a value x, the floor of x is the largest element in array smaller than or equal to x. Write efficient functions to find floor of x.
Examples: 
 

Input : arr[] = {1, 2, 8, 10, 10, 12, 19}, x = 5
Output : 2
2 is the largest element in 
arr[] smaller than 5.

Input : arr[] = {1, 2, 8, 10, 10, 12, 19}, x = 20
Output : 19
19 is the largest element in
arr[] smaller than 20.

Input : arr[] = {1, 2, 8, 10, 10, 12, 19}, x = 0
Output : -1
Since floor doesn't exist,
output is -1.

10) Ceiling in a sorted array ==> SortedArrayBS.cs ==> FindCeil 
https://www.geeksforgeeks.org/ceiling-in-a-sorted-array/

Given a sorted array and a value x, the ceiling of x is the smallest element in an array greater than or equal to x, 
and the floor is the greatest element smaller than or equal to x. Assume that the array is sorted in non-decreasing order. 
Write efficient functions to find the floor and ceiling of x. 
Examples : 

For example, let the input array be {1, 2, 8, 10, 10, 12, 19}
For x = 0:    floor doesn't exist in array,  ceil  = 1
For x = 1:    floor  = 1,  ceil  = 1
For x = 5:    floor  = 2,  ceil  = 8
For x = 20:   floor  = 19,  ceil doesn't exist in array

11) Next Alphabetical Element ==>  SortedArrayBS.cs ==> FindNextAlphabet 
https://www.geeksforgeeks.org/smallest-alphabet-greater-than-a-given-character/
https://leetcode.com/problems/find-smallest-letter-greater-than-target/

Given a list of sorted characters consisting of both Uppercase and Lowercase Alphabets and a particular target value, say K, the task is to find the smallest element in the list that is larger than K. 
Letters also wrap around. For example, if K = ‘z’ and letters = [‘A’, ‘r’, ‘z’], then the answer would be ‘A’.

Examples:  

Input : Letters = ["D", "J", "K"]
        K = "B"
Output: 'D'
Explanation:
The Next greater character of "B" is 'D'
since it is the smallest element from the 
set of given letters, greater than "B".

Input:  Letters = ["h", "n", "s"]
        K = "t"
Output: 'h'

12) Find position of an element in a sorted array of infinite numbers ==>  SortedArrayBS.cs ==> FindElementInfiniteArray 
https://www.geeksforgeeks.org/find-position-element-sorted-array-infinite-numbers/

Suppose you have a sorted array of infinite numbers, how would you search an element in the array?
Source: Amazon Interview Experience. 
Since array is sorted, the first thing clicks into mind is binary search, but the problem here is that we don’t know size of array. 
If the array is infinite, that means we don’t have proper bounds to apply binary search. So in order to find position of key, first we find bounds and then apply binary search algorithm.
Let low be pointing to 1st element and high pointing to 2nd element of array, Now compare key with high index element, 
->if it is greater than high index element then copy high index in low index and double the high index. 
->if it is smaller, then apply binary search on high and low indices found. 

13)  Index of First 1 in a Binary Sorted Infinite Array  ==>  SortedArrayBS.cs ==> FindFirstElementInFiniteArray 
https://www.geeksforgeeks.org/find-index-first-1-infinite-sorted-array-0s-1s/

Given an infinite sorted array consisting 0s and 1s. The problem is to find the index of first ‘1’ in that array. As the array is infinite, therefore it is guaranteed that number ‘1’ will be present in the array.
Examples: 
 

Input : arr[] = {0, 0, 1, 1, 1, 1} 
Output : 2

Input : arr[] = {1, 1, 1, 1,, 1, 1}
Output : 0


14) Minimum Difference Element in a Sorted Array ==>  SortedArrayBS.cs ==> MinDifferenceInSortedArray
https://www.callicoder.com/minimum-difference-element-in-sorted-array/

Find the minimum difference element in a sorted array
Given an array of integers sorted in ascending order, and a target value, find the element in the array that has minimum difference with the target value.

Example 1:

Input: a[] = [2, 5, 10, 12, 15], target = 6
Output: 5
Explanation: The difference between the target value '6' and '5' is the minimum. 
Example 2:

Input: a[] = [2, 5, 10, 12, 15], target = 5
Output: 5
Example 3:

Input: a[] = [2, 5, 10, 12, 15], target = 8
Output: 10
Example 4:

Input: a[] = [2, 5, 10, 12, 15], target = 11
Output: 10
Example 5:

Input: a[] = [2, 5, 10, 12, 15], target = 20
Output: 15